/* This is a linker parameter file for the mc9s08ac60 */
LINK bootloader.abs
NAMES END /* CodeWarrior will pass all the needed files to the linker by command line. But here you may add your own files too. */


STACKSIZE 0x80

SEGMENTS /* Here all RAM/ROM areas of the device are listed. Used in PLACEMENT below. */
    Z_RAM                    =  READ_WRITE   0x0070 TO 0x00FF;
    RAM                      =  READ_WRITE   0x0100 TO 0x086F;
    //ROM                    =  READ_ONLY    0x1860 TO 0xFFAF;
	ROM1                     =  READ_ONLY    0x0870 TO 0x17FF;
    ROM_BASE                 =  READ_ONLY    0x1860 TO 0x8410;
    ROM_MIRROR               =  READ_ONLY    0x8C00 TO 0xF7AF;
    ROM_BOOTLOADER           =  READ_ONLY    0xF7B2 TO 0xFFAF; 	// by Alex. Keep a Distance of 2 bytes between SEGMENTS so that they don't get copied into one PROGRAM_SEGMENT in .ELF(For Debugging only)
    ROM2                     =  READ_ONLY    0xFFC0 TO 0xFFC5;
   /* INTVECTS                 =  READ_ONLY    0xFFC6 TO 0xFFFF;  Reserved for Interrupt Vectors */
END


PLACEMENT /* Here all predefined and user segments are placed into the SEGMENTS defined above. */
    DEFAULT_RAM,                        /* non-zero page variables */
                                        INTO  RAM;

    _PRESTART,                          /* startup code */
    STARTUP,                            /* startup data structures */
    ROM_VAR,                            /* constant variables */
    STRINGS,                            /* string literals */
    VIRTUAL_TABLE_SEGMENT,              /* C++ virtual table segment */
    DEFAULT_ROM,
    COPY,                                /* copy down information: how to initialize variables */
                                       INTO ROM_BASE;// INTO  ROM; /* ,ROM1,ROM2: To use "ROM1,ROM2" as well, pass the option -OnB=b to the compiler */
    MIRROR_COPY						   INTO ROM_MIRROR;
    BOOTLOADER_CODE,
    BOOTLOADER_CONST		  		   INTO ROM_BOOTLOADER;
    _DATA_ZEROPAGE,                     /* zero page variables */
    MY_ZEROPAGE                         INTO  Z_RAM;
END

 /*VECTOR 0 _Startup //Reset vector: this is the default entry point for an application. */
